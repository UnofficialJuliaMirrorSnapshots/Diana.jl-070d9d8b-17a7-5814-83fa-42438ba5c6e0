function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Diana.Lexers.is_cat_id_start, (Char, Int32,))
    precompile(Diana.Lexers.peekchar, (Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(Diana.Lexers.is_identifier_char, (Char,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char, Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.lex_digit, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.lex_identifier, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Char,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Char, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.start, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.Type, (Type{Diana.Lexers.Lexer}, String,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.readchar, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.readrest, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.backup!, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.next_token, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Tokens.untokenize, (Array{Diana.Tokens.Token, 1},))
    precompile(Diana.Lexers.lex_quote, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Tokens.kind, (Diana.Tokens.Token,))
    precompile(Diana.Lexers.accept, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String,))
    precompile(Diana.Lexers.tryread, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.lex_dot, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Tokens.untokenize, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    #precompile(Diana.Lexers.lex_comment, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.read_string, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Diana.Tokens.Kind,))
    precompile(Diana.Lexers.accept_batch, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Function,))
    precompile(Diana.Lexers.extract_tokenstring, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.accept, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},typeof( Base.UTF8proc.isdigit),))
    precompile(Diana.Lexers.lex_whitespace, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.iswhitespace, (Char,))
    precompile(Diana.Lexers.next, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Bool,))
    precompile(Diana.Lexers.start_token!, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.accept, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},typeof( Diana.Lexers.iswhitespace),))
    precompile(Diana.Lexers.accept, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},typeof( Diana.Lexers.is_identifier_char),))
    precompile(Diana.Tokens.endpos, (Diana.Tokens.Token,))
    precompile(Diana.Lexers.done, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Bool,))
    precompile(Diana.Lexers.Type, (Type{Diana.Lexers.Lexer}, Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(Diana.Tokens.startpos, (Diana.Tokens.Token,))
    precompile(Diana.Tokens.untokenize, (Diana.Tokens.Token,))
    precompile(Diana.Lexers.accept, (Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Char,))
    precompile(Diana.Lexers._doret, (Char, Diana.Lexers.Lexer{Base.AbstractIOBuffer{Array{UInt8, 1}}},))
    precompile(Diana.Lexers.is_identifier_start_char, (Char,))
end
